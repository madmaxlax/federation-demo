schema {
  query: query_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Job {
  company: String
  description: String
  employmentType: String
  id: Int
  location: String
  position: String
  skillsRequired: [String]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """"""
  hello: String
  job(id: Int!): [Job]
  jobs: [Job]

  """
  fetch data from the table: "test"
  """
  test(
    """distinct select on columns"""
    distinct_on: [test_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_order_by!]

    """filter the rows returned"""
    where: test_bool_exp
  ): [test!]!

  """fetch data from the table: "test" using primary key columns"""
  test_by_pk(id: uuid!): test
}

type subscription_root {
  """
  fetch data from the table: "test"
  """
  test(
    """distinct select on columns"""
    distinct_on: [test_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_order_by!]

    """filter the rows returned"""
    where: test_bool_exp
  ): [test!]!

  """fetch data from the table: "test" using primary key columns"""
  test_by_pk(id: uuid!): test
}

"""
columns and relationships of "test"
"""
type test {
  id: uuid!
  key: String!
  value: String
}

"""
Boolean expression to filter rows from the table "test". All fields are combined with a logical 'AND'.
"""
input test_bool_exp {
  _and: [test_bool_exp!]
  _not: test_bool_exp
  _or: [test_bool_exp!]
  id: uuid_comparison_exp
  key: String_comparison_exp
  value: String_comparison_exp
}

"""Ordering options when selecting data from "test"."""
input test_order_by {
  id: order_by
  key: order_by
  value: order_by
}

"""
select columns of table "test"
"""
enum test_select_column {
  """column name"""
  id

  """column name"""
  key

  """column name"""
  value
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
